{
  "gitLessons": [
    {
      "LessonTitle": "Einf√ºhrung in Git",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Was ist Git?",
          "Example": "",
          "Explanation": "Git ist eine Art von Computersoftware, bekannt als ein Versionskontrollsystem. Es hilft den Menschen, √Ñnderungen an ihrem Computercode oder anderen textbasierten Dateien im Laufe der Zeit zu verfolgen.\n\nEs ist wie ein Verlaufsbuch f√ºr deine Dateien, so dass du sehen kannst, wer √Ñnderungen gemacht hat, welche √Ñnderungen gemacht wurden und wann sie stattgefunden haben."
        },
        {
          "StepNumber": 2,
          "Description": "Warum wird es verwendet?",
          "Example": "",
          "Explanation": "Git wird verwendet, um die Arbeit an Projekten mit anderen Leuten viel einfacher zu machen. Es hilft mehreren Menschen, an denselben Dateien zusammenzuarbeiten, ohne versehentlich die Arbeit des anderen zu √ºberschreiben.\n\nSie k√∂nnen auch mit neuen Ideen experimentieren, ohne sich Gedanken dar√ºber machen zu m√ºssen, was Sie bereits getan haben.\n\nZus√§tzlich Git ist gro√üartig, um Backups zu behalten und verschiedene Versionen Ihrer Dateien zu verwalten, so dass Sie bei Bedarf immer wieder zu einem vorherigen Status zur√ºckkehren k√∂nnen"
        },
        {
          "StepNumber": 3,
          "Description": "Installing Git",
          "Example": "git --version",
          "Explanation": "Gehen Sie zur offiziellen Git Website (https://git-scm.com/) und finden Sie den Download-Bereich.\n\nW√§hlen Sie die Version von Git, die zum Betriebssystem Ihres Computers passt (wie Windows, macOS oder Linux).\n\nSobald der Download abgeschlossen ist, √∂ffnen Sie die heruntergeladene Datei und folgen Sie den Installationsanweisungen.\n\nNach der Installation k√∂nnen Sie √ºberpr√ºfen, ob Git installiert ist, indem Sie ein Terminal oder eine Eingabeaufforderung √∂ffnen und eingeben"
        },
        {
          "StepNumber": 4,
          "Description": "Git auf Ihrem Computer einrichten",
          "Example": "git config --global user.name 'Your Name'\ngit config --global user.email 'Your email ID'",
          "Explanation": "Um Git nutzen zu k√∂nnen, m√ºssen Sie es zuerst auf Ihrem Computer konfigurieren, indem Sie Ihren Benutzernamen und Ihre E-Mail-Adresse festlegen. Diese Informationen werden jedem Commit in Git angeh√§ngt."
        },
        {
          "StepNumber": 5,
          "Description": "üòï Sind Git und Github gleich?",
          "Example": "",
          "Explanation": "Nein, Git und GitHub sind nicht die gleichen, aber sie sind verwandte Konzepte \n\nGit ist die Kerntechnologie, die die Versionskontrolle lokal verwaltet.\n\nGitHub ist eine Plattform, die es einfach macht, Git-Repositories √ºber das Internet zu speichern, zu teilen und zusammenzuarbeiten. Andere √§hnliche Plattformen sind GitLab und Bitbucket."
        }
      ]
    },
    {
      "LessonTitle": "Git Grundlagen",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Initialisieren eines Projekts",
          "Example": "git init",
          "Explanation": "Nach der Installation von Git ist der erste Schritt, die Versionskontrolle f√ºr Ihr Projekt einzurichten.\n\n√ñffnen Sie Ihr Kommandozeilenterminal oder Git Bash (falls Sie unter Windows sind) und navigieren Sie zu dem Verzeichnis, in dem Sie Ihr Projekt starten m√∂chten.\n\nVerwenden Sie den folgenden Befehl, um ein neues Git-Repository zu initialisieren"
        },
        {
          "StepNumber": 2,
          "Description": "Dateien erstellen und Text hinzuf√ºgen",
          "Example": "Hallo, dies ist meine erste Datei",
          "Explanation": "Sie k√∂nnen jeden von Ihnen bevorzugten Texteditor wie Notepad,Vim,Sublime oder Visual Studio Code\n\nErstellen Sie eine neue Datei 'Hallo. xt' und dann den folgenden Text schreiben und die Datei speichern"
        },
        {
          "StepNumber": 3,
          "Description": "Dateien hinzuf√ºgen und verfolgen",
          "Example": "git add hello.txt",
          "Explanation": "Sobald Sie Ihre Datei erstellt und bearbeitet haben, ist es an der Zeit, sie mit Git zu verfolgen.\n\nUm dies zu tun, verwenden Sie den Befehl 'git add <file name>'."
        },
        {
          "StepNumber": 4,
          "Description": "Status wird √ºberpr√ºft",
          "Example": "git status",
          "Explanation": "An jeder Stelle k√∂nnen Sie den Status Ihres Projektarchivs √ºberpr√ºfen, um zu sehen, welche Dateien f√ºr die n√§chste √úbertragung verfolgt, modifiziert oder inszeniert werden.\n\nDer 'git status' Befehl liefert Ihnen diese Informationen."
        },
        {
          "StepNumber": 5,
          "Description": "Commits erstellen",
          "Example": "git commit -m \"my first commit\"",
          "Explanation": "Ein Commit in Git stellt einen Schnappschuss Ihres Projekts zu einem bestimmten Zeitpunkt dar.\n\nEs ist eine M√∂glichkeit, Ihre √Ñnderungen aufzuzeichnen und eine aussagekr√§ftige Beschreibung zu liefern, was Sie getan haben.\n\nUm einen Commit zu machen, benutzen Sie den folgenden Befehl"
        },
        {
          "StepNumber": 6,
          "Description": "Was als N√§chstes?",
          "Example": "",
          "Explanation": "üéâ Herzlichen Gl√ºckwunsch! Du hast die Grundlagen von Git abgedeckt.\n\nWie du deine Reise mit Git fortsetzst, wirst du mehr √ºber Branching, Merging,etc. erfahren.\n\nUnd vergessen Sie nicht, dass die Git Dokumentation und Online-Tutorials hervorragende Ressourcen sind, um Ihr Verst√§ndnis zu vertiefen."
        }
      ]
    },
    {
      "LessonTitle": "Git Zweige",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Was ist ein Git Branch?",
          "Example": "",
          "Explanation": "Ein Git-Zweig ist eine separate Entwicklungslinie, mit der Sie an verschiedenen Teilen Ihres Projekts arbeiten k√∂nnen, ohne die Hauptcodebase zu beeintr√§chtigen.\n\nDies ist besonders n√ºtzlich f√ºr die Zusammenarbeit und das Management mehrerer Funktionen, Fehlerbehebungen oder Experimente gleichzeitig.\n\nZweige helfen bei der Isolierung von √Ñnderungen, die es einfacher machen, √Ñnderungen zu √ºberpr√ºfen, zu testen und wieder in die Hauptcodebase zu integrieren."
        },
        {
          "StepNumber": 2,
          "Description": "Einen Zweig erstellen",
          "Example": "git branch feature-login",
          "Explanation": "Um einen neuen Branch zu erstellen, benutze den `git branch` Befehl gefolgt von dem Namen des Branches den du erstellen m√∂chtest."
        },
        {
          "StepNumber": 3,
          "Description": "Zweig wechseln",
          "Example": "git checkout feature-login",
          "Explanation": "Um zum neuen Zweig zu wechseln, benutze den Befehl `git checkout` oder `git switch` gefolgt von dem Namen des Zweigs."
        },
        {
          "StepNumber": 4,
          "Description": "[Shortcut] Branch erstellen und wechseln",
          "Example": "git checkout -b feature-signup",
          "Explanation": "Um den neuen Zweig in einem Befehl zu erstellen und zu wechseln, benutze `git checkout -b <branch-name>`."
        },
        {
          "StepNumber": 5,
          "Description": "Zweig zusammenf√ºhren",
          "Example": "git checkout main\ngit merge feature-login",
          "Explanation": "Sobald Sie mit den √Ñnderungen, die Sie an Ihrem Zweig vorgenommen haben, zufrieden sind, ist es an der Zeit, diese √Ñnderungen wieder in die Hauptcodebase zu integrieren.\n\nUm dies zu tun, wechseln Sie zum Haupt- und Master-Zweig und benutzen den Befehl `git merge`."
        },
        {
          "StepNumber": 6,
          "Description": "Einen Zweig l√∂schen",
          "Example": "git branch -d feature-login",
          "Explanation": "Stellen Sie sicher, dass Sie alle √Ñnderungen aus dem Zweig zusammengef√ºhrt haben, den Sie l√∂schen m√∂chten, bevor Sie diesen Befehl ausf√ºhren.\n\nUm einen Branch zu l√∂schen, benutze den `git branch` Befehl gefolgt von der `-d` Option.\n\nWenn du einen Branch zwangsweise l√∂schen musst, benutze das `-D` Flag anstelle von `-d`."
        }
      ]
    },
    {
      "LessonTitle": "Git Staging",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Was ist Git Staging",
          "Example": "",
          "Explanation": "Git Inszenierung ist der Prozess der Vorbereitung einer Reihe von √Ñnderungen, die an das Git Repository √ºbergeben werden.\n\nSie k√∂nnen nur die √Ñnderungen ausw√§hlen, die Sie im n√§chsten Commit einf√ºgen m√∂chten, statt alle √Ñnderungen an dem Projektarchiv zu √ºbertragen."
        },
        {
          "StepNumber": 2,
          "Description": "√Ñnderungen werden im Git Staging Area hinzugef√ºgt",
          "Example": "git f√ºgt file1.txt file2.txt hinzu",
          "Explanation": "Um √Ñnderungen an der Git Staging Area hinzuzuf√ºgen, benutze den Befehl `git add`, gefolgt von den Namen der Dateien, die du hinzuf√ºgen m√∂chtest.\n\nDies wird die √Ñnderungen studieren, was bedeutet, dass sie bei der n√§chsten √úbertragung ber√ºcksichtigt werden."
        },
        {
          "StepNumber": 3,
          "Description": "Stagierte und ungeplante √Ñnderungen anzeigen",
          "Example": "git diff\ngit diff --staged",
          "Explanation": "Um die √Ñnderungen, die du am Git-Repository vorgenommen hast, zu sehen, benutze den Befehl `git diff`.\n\nUm nur die vorgenommenen √Ñnderungen anzuzeigen, benutze den `git diff --staged` Befehl. Dies zeigt eine Liste der vorgenommenen √Ñnderungen an und ist bereit f√ºr Commit."
        },
        {
          "StepNumber": 4,
          "Description": "√Ñnderungen aus dem Staging-Bereich entfernen",
          "Example": "git reset file1.txt",
          "Explanation": "Um √Ñnderungen aus dem Git Staging Area zu entfernen, benutze den Befehl `git reset`, gefolgt von dem Namen der Datei, die du entfernen m√∂chtest.\n\nDies wird die √Ñnderungen aus der Staging-Zone entfernen, aber sie werden weiterhin im Arbeitsbaum existieren."
        },
        {
          "StepNumber": 5,
          "Description": "√úbertrage Stage √Ñnderungen",
          "Example": "git commit -m 'Commit message'",
          "Explanation": "Um die √Ñnderungen im Git Staging Area in das Git Repository zu √ºbertragen, verwenden Sie den Befehl `git commit` gefolgt von einer Commit-Nachricht.\n\nDies erstellt einen neuen Commit im Git-Log mit den √Ñnderungen, die du durchgef√ºhrt hast."
        }
      ]
    },
    {
      "LessonTitle": "GitHub",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Was ist GitHub?",
          "Example": "",
          "Explanation": "GitHub ist eine webbasierte Plattform f√ºr Versionskontrolle und Zusammenarbeit mit Git.\n\nEs stellt ein zentralisiertes Projektarchiv f√ºr Projekte zur Verf√ºgung, das es Teams einfacher macht, an Code zu arbeiten und √Ñnderungen zu verfolgen."
        },
        {
          "StepNumber": 2,
          "Description": "GitHub Konto erstellen",
          "Example": "",
          "Explanation": "Um GitHub zu verwenden, m√ºssen Sie ein GitHub Konto erstellen, indem Sie die GitHub Website besuchen und den Anmeldeprozess verfolgen. Sie werden aufgefordert, Ihren Benutzernamen, Ihre E-Mail-Adresse und Ihr Passwort anzugeben."
        },
        {
          "StepNumber": 3,
          "Description": "Neues GitHub Repository erstellen",
          "Example": "",
          "Explanation": "1. Melden Sie sich bei Ihrem GitHub-Konto an.\n\n2. Klicken Sie auf das \"+\" Symbol in der oberen rechten Ecke und w√§hlen Sie \"Neues Repository\"\n\n3. Geben Sie einen Namen f√ºr Ihr Projektarchiv, eine kurze Beschreibung ein und w√§hlen Sie aus, ob es √∂ffentlich ist (f√ºr jedermann sichtbar) oder privat (nur f√ºr Mitarbeiter sichtbar)\n\n4. W√§hlen Sie bei Bedarf zus√§tzliche Optionen wie die Initialisierung des Repositorys mit einer README-Datei\n\n5. Klicken Sie auf \"Repository erstellen\""
        },
        {
          "StepNumber": 4,
          "Description": "Ein GitHub Repository klonen",
          "Example": "git clone <repository_link>",
          "Explanation": "Klonen eines Projektarchivs bedeutet, dessen Inhalt auf Ihren lokalen Rechner zu kopieren.\n\nDies erlaubt dir, √Ñnderungen vorzunehmen, sie mit Git zu verfolgen und diese √Ñnderungen zur√ºck ins Projektarchiv zu schieben.\n\nUm ein GitHub Repository auf Ihren lokalen Rechner zu klonen, benutze den `git clone` Befehl gefolgt von der URL des GitHub Repository.\n\n Zum Beispiel: \"git clone https://github.com/firstcontributions/first-contributions.git\""
        },
        {
          "StepNumber": 5,
          "Description": "√Ñnderungen vornehmen und auf GitHub √ºbertragen",
          "Example": "git add .\ngit commit -m \"message\"\n\ngit push origin main",
          "Explanation": "Sobald Sie ein Repository geklont haben, k√∂nnen Sie √Ñnderungen an den Dateien vornehmen, genau wie Sie es mit jedem anderen Git-Repository tun w√ºrden.\n\nNachdem du √Ñnderungen vorgenommen hast, folge diesen Schritten, um deine √Ñnderungen auf GitHub zu √ºbertragen.\n\nBenutzen Sie dann den Befehl `git push` gefolgt von dem Namen des Zweiges in den Sie die √Ñnderungen verschieben m√∂chten. Dies wird die √Ñnderungen in das GitHub Repository hochladen."
        }
      ]
    },
    {
      "LessonTitle": "Git zu GitHub Workflow mit Terminal",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Erstelle ein neues Git-Repository lokal",
          "Example": "git init my-new-project",
          "Explanation": "Um Git f√ºr ein neues Projekt zu verwenden, m√ºssen Sie ein neues Git-Repository erstellen. Du kannst dies tun, indem du zum Projektverzeichnis im Terminal navigierst und den Befehl \"git init\" ausf√ºhrst."
        },
        {
          "StepNumber": 2,
          "Description": "Dateien zum Git-Repository hinzuf√ºgen",
          "Example": "git add .\ngit commit -m 'Initial commit'",
          "Explanation": "Um Dateien zum Git-Repository hinzuzuf√ºgen, benutze den Befehl `git add` gefolgt von den Dateinamen oder `. , um alle Dateien im Verzeichnis hinzuzuf√ºgen. Benutze dann den Befehl `git commit` um einen neuen Commit mit einer Nachricht zu erstellen, die deine √Ñnderungen beschreibt."
        },
        {
          "StepNumber": 3,
          "Description": "Neues GitHub Repository erstellen",
          "Example": "",
          "Explanation": "Um ein neues GitHub Repository zu erstellen, loggen Sie sich in Ihr GitHub Konto ein und klicken Sie auf die Schaltfl√§che 'Neue Repository'. Sie werden aufgefordert, einen Repository-Namen, eine Beschreibung und die Sichtbarkeit des Projektarchivs (√∂ffentlich oder privat) anzugeben."
        },
        {
          "StepNumber": 4,
          "Description": "GitHub Repository als Remote hinzuf√ºgen",
          "Example": "git remote add origin https://github.com/user/repo.git",
          "Explanation": "Um das lokale Git-Repository mit dem GitHub Repository zu verkn√ºpfen, m√ºssen Sie das GitHub Repository als Remote in Git hinzuf√ºgen. Du kannst dies mit dem Befehl `git remote add` tun, gefolgt von dem Namen, den du der Remote (typischerweise `origin`) und der URL des GitHub Repositorys geben m√∂chtest."
        },
        {
          "StepNumber": 5,
          "Description": "√Ñnderungen in das GitHub Repository schieben",
          "Example": "git push -u origin master",
          "Explanation": "Um die √Ñnderungen im lokalen Git-Repository in das GitHub Repository zu schieben, benutze den Befehl `git push` gefolgt von dem Namen der entfernten (`origin`) und dem Zweig, in den du die √Ñnderungen verschieben m√∂chtest (`master`). Die `-u` Option legt die Remote und den Branch als Standard f√ºr zuk√ºnftige `git push` Befehle fest."
        }
      ]
    }
  ]
}