{
  "gitCommands": [
    {
      "name": "Inicializar repositorio",
      "command": "git init [directory]",
      "description": "Inicializar un nuevo repositorio Git en el directorio actual o especificado.",
      "example": "git init mi_proyecto"
    },
    {
      "name": "Clonar repositorio",
      "command": "git clone [repository_url] [directory]",
      "description": "Clonar un repositorio Git existente en un directorio nuevo de la máquina local.",
      "example": "git clone https://github.com/user/repo.git my_repo"
    },
    {
      "name": "Añadir Archivos",
      "command": "git add [archivo(s)]",
      "description": "Añadir archivos al área de Staging de Git, listos para una confirmación.",
      "example": "git add file1.txt file2.txt"
    },
    {
      "name": "Cambios de Commit",
      "command": "git commit -m [message]",
      "description": "Guarda los cambios realizados en el repositorio Git en el historial con un mensaje de confirmación especificado.",
      "example": "git commit -m 'Añadir archivos importantes'"
    },
    {
      "name": "Empujar cambios",
      "command": "git push [remote_name] [branch_name]",
      "description": "Cambios enviados a un repositorio remoto.",
      "example": "git push origin master"
    },
    {
      "name": "Tirar Cambios",
      "command": "git pull [remote_name] [branch_name]",
      "description": "Recuperar cambios desde un repositorio remoto y fusionarlos con el repositorio local.",
      "example": "git pull origin master"
    },
    {
      "name": "Comprobar estado",
      "command": "git status",
      "description": "Compruebe el estado del repositorio Git y ver los cambios que aún no han sido confirmados.",
      "example": "git status"
    },
    {
      "name": "Ver historial de cambios",
      "command": "git log",
      "description": "Ver el historial de commits en el repositorio Git.",
      "example": "git log"
    },
    {
      "name": "Crear una rama",
      "command": "git branch [branch_name]",
      "description": "Crear una nueva rama en el repositorio Git.",
      "example": "git branch new_feature"
    },
    {
      "name": "Cambiar a una rama",
      "command": "git checkout [branch_name]",
      "description": "Cambiar a una rama diferente en el repositorio Git.",
      "example": "git checkout new_feature"
    },
    {
      "name": "Comparar ramas",
      "command": "git diff [branch1] [branch2]",
      "description": "Compara las diferencias entre dos ramas en el repositorio Git.",
      "example": "git diff master new_feature"
    },
    {
      "name": "Fusionar ramas",
      "command": "git merge [branch_name]",
      "description": "Combinar cambios de una rama especificada en la rama actual en el repositorio Git.",
      "example": "git merge new_feature"
    },
    {
      "name": "Renombrar una rama",
      "command": "git branch -m [new_branch_name]",
      "description": "Renombrar la rama actual en el repositorio Git.",
      "example": "git branch -m updated_feature"
    },
    {
      "name": "Eliminar una rama",
      "command": "git branch -d [branch_name]",
      "description": "Eliminar una rama en el repositorio Git.",
      "example": "git branch -d outdated_feature"
    },
    {
      "name": "Restablecer Cambios",
      "command": "git reset [file]",
      "description": "Restablecer los cambios realizados a un archivo en el repositorio Git.",
      "example": "git reset file1.txt"
    },
    {
      "name": "Deshacer Commit",
      "command": "git revert [commit_hash]",
      "description": "Deshacer un commit específico en el repositorio Git.",
      "example": "git revert abc123"
    },
    {
      "name": "Etiqueta un Commit",
      "command": "git tag [tag_name] [commit_hash]",
      "description": "Añadir una etiqueta a un commit específico en el repositorio Git.",
      "example": "git tag v1.0 abc123"
    },
    {
      "name": "Cambios de Stash",
      "command": "git stash",
      "description": "Guarda temporalmente los cambios realizados en el repositorio Git sin confirmar.",
      "example": "git stash"
    },
    {
      "name": "Aplicar cambios almacenados",
      "command": "git stash apply",
      "description": "Aplicar cambios que fueron almacenados en el repositorio Git.",
      "example": "git stash aplicar"
    },
    {
      "name": "Lista de Cambios Escondidos",
      "command": "git stash list",
      "description": "Listar todos los cambios almacenados en el repositorio Git.",
      "example": "lista de almacenamiento git"
    },
    {
      "name": "Eliminar Cambios Escondidos",
      "command": "git stash drop",
      "description": "Eliminar cambios almacenados del repositorio Git.",
      "example": "git stash drop"
    },
    {
      "name": "Mostrar Log de Commit",
      "command": "git log",
      "description": "Mostrar el historial de confirmación del repositorio Git.",
      "example": "git log"
    },
    {
      "name": "Mostrar diferencias de commmit",
      "command": "git show [commit_hash]",
      "description": "Mostrar las diferencias de un commit específico en el repositorio Git.",
      "example": "git show abc123"
    },
    {
      "name": "Obtener Cambios Remotos",
      "command": "git fetch",
      "description": "Obtener actualizaciones de un repositorio remoto al repositorio local.",
      "example": "obtener git"
    },
    {
      "name": "Cambios remotos de Pull",
      "command": "git pull",
      "description": "Obtener y combinar actualizaciones de un repositorio remoto al repositorio local.",
      "example": "git pull"
    },
    {
      "name": "Empujar cambios locales",
      "command": "git push [remote_name] [branch_name]",
      "description": "Push cambios locales a un repositorio remoto.",
      "example": "git push origin new_feature"
    },
    {
      "name": "Añadir repositorio remoto",
      "command": "git remote add [remote_name] [remote_url]",
      "description": "Añadir un repositorio remoto al repositorio local.",
      "example": "git remote add upstream https://github.com/upstream_repo.git"
    },
    {
      "name": "Eliminar repositorio remoto",
      "command": "git remote remove [remote_name]",
      "description": "Eliminar un repositorio remoto del repositorio local.",
      "example": "git remote remove upstream"
    },
    {
      "name": "Mostrar repositorio remoto",
      "command": "git remote show [remote_name]",
      "description": "Mostrar información sobre un repositorio remoto en el repositorio local.",
      "example": "git remote show origin"
    },
    {
      "name": "Git Rebase",
      "command": "git rebase [options] [--onto newbase] [upstream [branch]]",
      "description": "Reescribir historial de confirmación moviendo commits de una rama a otra.",
      "example": "git rebase master"
    },
    {
      "name": "Git Cherry-pick",
      "command": "git cherry-pick [options] <commit>",
      "description": "Aplicar cambios introducidos por algunos commits existentes.",
      "example": "git cherry-pick abcd123"
    },
    {
      "name": "Git Bisect",
      "command": "git bisect [start] [end]",
      "description": "Encuentre qué commit en un rango introdujo un error realizando una búsqueda binaria.",
      "example": "git bisect start HEAD HEAD~10"
    },
    {
      "name": "Guardar temporalmente",
      "command": "stash git [save | push] [-p|--patch] [-k|--keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>",
      "description": "Guarda temporalmente cambios que aún no están listos para ser confirmados.",
      "example": "git stash save \"work in progress\""
    },
    {
      "name": "Submódulo Git",
      "command": "git submodule [options] [submodule]",
      "description": "Administrar sub-repositorios dentro de su repositorio Git principal.",
      "example": "git submodule update --init"
    },
    {
      "name": "Registro de referencias",
      "command": "git reflog [options] [show]",
      "description": "Ver un registro de todas las referencias de Git en su repositorio, incluso si han sido eliminadas o perdidas.",
      "example": "git reflog show HEAD"
    },
    {
      "name": "Combinar Compromisos",
      "command": "git rebase -i HEAD~[número de commits to squash]",
      "description": "Combina múltiples commits en un solo commit",
      "example": "git rebase -i HEAD~3"
    },
    {
      "name": "Mostrar Registro de Cambios",
      "command": "git reflog",
      "description": "Muestra un registro de cambios en el HEAD del repositorio",
      "example": "git reflog"
    },
    {
      "name": "Comparar Compromisos",
      "command": "git diff [commit A]..[commit B]",
      "description": "Muestra las diferencias entre dos commits",
      "example": "diff git abc123..def456"
    },
    {
      "name": "Configurar Git",
      "command": "git config [option]",
      "description": "Configura los ajustes de Git",
      "example": "git config --global user.name 'Tu nombre'"
    },
    {
      "name": "Eliminar archivos",
      "command": "git rm [file]",
      "description": "Elimina un archivo del repositorio",
      "example": "git rm example.txt"
    },
    {
      "name": "Compromiso de Tag",
      "command": "tag git [nombre de etiqueta]",
      "description": "Añade una etiqueta a un commit específico",
      "example": "git tag v1.0.0"
    },
    {
      "name": "Recuperar la confirmación anterior",
      "command": "git checkout [commit]",
      "description": "Cambia a un commit anterior y restaura el estado del repositorio",
      "example": "git checkout abc123"
    },
    {
      "name": "Cambiar a rama",
      "command": "git switch <branch_name>",
      "description": "Cambia a la rama especificada.",
      "example": "git switch feature_branch"
    },
    {
      "name": "Crear y cambiar a una nueva rama",
      "command": "git switch -c <new_branch_name>",
      "description": "Crea y cambia a una nueva rama con el nombre especificado.",
      "example": "git switch -c new_feature_branch"
    },
    {
      "name": "Forzar cambiar a la rama",
      "command": "git switch -C <branch_name>",
      "description": "Fuerza que cambia a la rama especificada, descartando los cambios locales.",
      "example": "git switch -C feature_branch"
    }
  ]
}