{
  "gitLessons": [
    {
      "LessonTitle": "Git 简介",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "什么是 Git？",
          "Example": "",
          "Explanation": "Git 是属于一种版本控制系统（电脑软件）。 它帮助我们追踪、记录与控制电脑代码或其他文本文件的任何更改。\n\n它就像文件版本的历史书，就可以简易地看到谁做了更改、做了什么以及什么时候做了修改。"
        },
        {
          "StepNumber": 2,
          "Description": "为何使用 Git？",
          "Example": "",
          "Explanation": "Git 把合作进程的过程变得更加容易。当有多人合作时不怕会意外地覆盖别人所作的更改。\n\n使用 Git 时还可以安全地尝试新想法。\n\nGit也可以存储备份，用来管理不同的文件版本，随时都可以轻易地回到以前的状态。"
        },
        {
          "StepNumber": 3,
          "Description": "下载 Git",
          "Example": "git --version",
          "Explanation": "从 Git 的官方网站(https://git-scm.com/)的下载网页中选出您电脑操作系统的 Git 版本（例如 Windows、macOS、Linux)。\n\n把下载完毕的文件打开，然后根据具有的 Git 安装步骤。\n\n安装完毕后，检查 Git 是否安装成功。在您的终端或命令提示符里输入"
        },
        {
          "StepNumber": 4,
          "Description": "在您的电脑设置 Git",
          "Example": "git config --global user.name '您的用戶名稱'\ngit config --global user.email '您的電郵地址'",
          "Explanation": "使用 Git 前，首先要把它设置好。输入您的用户名称与电邮地址，这两份数据将会在您的每一个更改提交（commit）中出现（commit 备注信息）。"
        },
        {
          "StepNumber": 5,
          "Description": "😕 Git 和 Github 是一样的东西吗？",
          "Example": "",
          "Explanation": "不对，Git 和 GitHub 虽然有相关的概念，但是他们是不一样的东西。\n\nGit 是一款版本控制的软件。\n\n而 GitHub 是一个可以方便存储、分享和在网络上协作的 Git 仓库平台。除了 GitHub 意以外还有其他类似的平台，例如 GitLab 和 Bitbucket。"
        }
      ]
    },
    {
      "LessonTitle": "Git 的基础",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "开始项目",
          "Example": "git init",
          "Explanation": "安装了 Git 后就可以开始设置您项目的版本控制系统。\n\n先打开您的电脑终端、命令提示符或 Git Bash（Windows 方面），然后去到您要使用 Git 的文件目录。\n\n利用以下的指令来初始化一个新的 Git 仓库（Repository）"
        },
        {
          "StepNumber": 2,
          "Description": "创建文件，添加文本",
          "Example": "您好。这是我第一个文件",
          "Explanation": "在您刚初始化的仓库里创建一个叫’hello.txt‘的新文件。\n\n利用 Notepad、Vim、Sublime、VS Code 等类似的文本编辑器，输入以下的文本，然后保存文件"
        },
        {
          "StepNumber": 3,
          "Description": "添加与追踪文件",
          "Example": "git add hello.txt",
          "Explanation": "文件创建后，就可以开始用 Git 追踪了。\n\n利用以下的 ’git add <文件名称>‘ 指令，Git 就会开始记录跟追踪您的文件了。"
        },
        {
          "StepNumber": 4,
          "Description": "检查 Git 状态",
          "Example": "git status",
          "Explanation": "您可以随时查看您仓库的状态，检查看看有哪一些文件有在被追踪、被更改或被暂存（stage）到下一个提交里。\n\n使用“git status”指令就可以看到这些数据了。"
        },
        {
          "StepNumber": 5,
          "Description": "提交所作的更改",
          "Example": "git commit -m \"my first commit\"",
          "Explanation": "Git 提交就是指您项目在某个时候的快照，就像之前提到的历史书。\n\n它可以轻易地记录下您所作过的更改还有一段备注信息来描述所作的更改\n\n使用以下的指令来作出提交"
        },
        {
          "StepNumber": 6,
          "Description": "下一步呢？",
          "Example": "",
          "Explanation": "🎉 恭喜！您现在已经学会了 Git 的基础知识。\n\n您继续使用 Git 的过程是将会遇到分支、合并等的其他 Git 服务。\n\nGit 的官方文档和其他网上的教程可以深化您对 Git 的了解和知识。"
        }
      ]
    },
    {
      "LessonTitle": "吉特分支",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "什么是Git分支？",
          "Example": "",
          "Explanation": "Git分支是一个单独的开发线路，您可以在不影响主代码库的情况下在项目的不同部分工作。\n\n这对于协作和管理多个功能、错误修复或实验特别有用。\n\n分支帮助隔离更改，使其更容易审查、测试和整合到主代码库中。"
        },
        {
          "StepNumber": 2,
          "Description": "创建分支",
          "Example": "git branch feature-login",
          "Explanation": "若要创建一个新分支，请使用你想要创建的分支的名称后面的“git分支”命令。"
        },
        {
          "StepNumber": 3,
          "Description": "切换分支",
          "Example": "git checkout feature-login",
          "Explanation": "要切换到新分支，请使用git checkout”或“git switch”命令，然后使用分支的名称。"
        },
        {
          "StepNumber": 4,
          "Description": "[Shortcut] 创建并切换分支",
          "Example": "git checkout -b feature-signup",
          "Explanation": "若要在一个命令中创建并切换到新分支，请使用 \"git 结帐-b <branch-name>\"。"
        },
        {
          "StepNumber": 5,
          "Description": "合并分支",
          "Example": "git 结帐主\ngit 合并功能——登录",
          "Explanation": "一旦你对你的分支所做的更改感到满意，现在是将这些更改合并到主代码库的时候了。\n\n要做到这一点，请切换到主分支并使用“git合并”命令。"
        },
        {
          "StepNumber": 6,
          "Description": "删除分支",
          "Example": "git branch -d feature-login",
          "Explanation": "在运行此命令之前，请确保您已经合并了您想要删除的分支的所有更改。\n\n若要删除一个分支，请使用 `git branch` 命令，然后使用 `-d` 选项。\n\n如果您需要强制删除分支，请使用 \"-D\" 旗帜而不是 \"-d\"。"
        }
      ]
    },
    {
      "LessonTitle": "Git Staging",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "什么是Git Staging",
          "Example": "",
          "Explanation": "Git Staging是准备对Git 存储库进行一系列更改的过程。\n\n允许您只选择您想要在下次提交中包含的更改， 而不是承诺对仓库所作的所有更改。"
        },
        {
          "StepNumber": 2,
          "Description": "添加Git暂存区的更改",
          "Example": "git add file1.txt file2.txt",
          "Explanation": "要添加对 Git Staging 区域的更改，请使用 `git add` 命令，然后是您想要添加的文件的名称。\n\n这将进行更改，这意味着它们将被包含在下一个承诺中。"
        },
        {
          "StepNumber": 3,
          "Description": "查看分阶段和未分阶段的更改",
          "Example": "git diff\ngit diff --staged",
          "Explanation": "要查看您对 Git 仓库所作的更改，请使用 \"git diff\" 命令。\n\n要只查看已分阶段更改，请使用 `git diff --staged` 命令。 这将显示已经进行并准备就绪的更改列表。"
        },
        {
          "StepNumber": 4,
          "Description": "从暂存区移除更改",
          "Example": "git reset file1.txt",
          "Explanation": "要移除Git Staging区域中的更改，请使用`git reset`命令，然后是您想要移除的文件的名称。\n\n这将移除暂存区的更改，但它们仍然存在于工作树中。"
        },
        {
          "StepNumber": 5,
          "Description": "正在提交分期更改",
          "Example": "git commit -m 'Commit message'",
          "Explanation": "若要将 Git 暂存区中的更改提交到 Git 仓库，请使用 `git commit` 命令然后提交消息。\n\n这将在Git日志中创建一个新的提交，并且您已经进行了修改。"
        }
      ]
    },
    {
      "LessonTitle": "GitHub",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "什么是 GitHub？",
          "Example": "",
          "Explanation": "GitHub 是一个使用Git的版本控制和协作网络平台。\n\n提供一个集中的项目仓库，使团队更容易在代码和跟踪更改方面进行合作。"
        },
        {
          "StepNumber": 2,
          "Description": "创建 GitHub 帐户",
          "Example": "",
          "Explanation": "要开始使用 GitHub，您需要访问GitHub 网站并跟随注册过程，创建一个 GitHub 帐户。 您将被要求提供您的用户名、电子邮件地址和密码。"
        },
        {
          "StepNumber": 3,
          "Description": "创建新的 GitHub 仓库",
          "Example": "",
          "Explanation": "1. Log in to your GitHub account.\n\n2. Click the \"+\" icon in the top-right corner and select \"New repository\"\n\n3. Provide a name for your repository, a brief description, and choose whether it's public (visible to anyone) or private (visible only to collaborators)\n\n4. Select additional options if needed, such as initializing the repository with a README file\n\n5. Click \"Create repository\""
        },
        {
          "StepNumber": 4,
          "Description": "克隆一个 GitHub 仓库",
          "Example": "git clone <repository_link>",
          "Explanation": "克隆仓库意味着将其内容复制到您的本地机器。\n\n允许您进行更改，用Git跟踪它们，并将这些更改推回到仓库中。\n\n要克隆一个 GitHub 仓库到您的本地机器，请使用 `git clone` 命令，然后使用 GitHub 仓库的 URL。\n\n 示例：“git clone https://github.com/firstcontributions/first contributions.git”"
        },
        {
          "StepNumber": 5,
          "Description": "进行更改并推送到 GitHub",
          "Example": "git 添加。\ngit 提交-m \"message\"\n\ngit 推送原始主",
          "Explanation": "一旦你克隆了一个仓库，你可以像其他Git仓库一样对文件进行修改。\n\n在进行更改后，按照这些步骤将您的更改推送到 GitHub\n\n然后使用你想要推送更改的分支名称后面的“git pus”命令。 这将上传到GitHub 仓库的更改。"
        }
      ]
    },
    {
      "LessonTitle": "使用终端Git 到 GitHub 工作流",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "在本地创建一个新的 Git 仓库",
          "Example": "git init init my-new-project",
          "Explanation": "要开始使用 Git 进行新的项目，您需要创建一个新的 Git 存储库。 您可以通过导航到您在终端中的项目目录并运行 `git init` 命令来做到这一点。"
        },
        {
          "StepNumber": 2,
          "Description": "将文件添加到 Git 仓库",
          "Example": "git 添加。\ngit commit -m '初始提交'",
          "Explanation": "要将文件添加到 Git 仓库，请使用 `git add` 命令，然后是文件名或 `。 添加目录中的所有文件。 然后使用 \"git commit\" 命令创建一个新的提交，包含描述您已经做出的更改的消息。"
        },
        {
          "StepNumber": 3,
          "Description": "创建新的 GitHub 仓库",
          "Example": "",
          "Explanation": "要创建一个新的 GitHub 仓库，请登录到您的 GitHub 帐户并点击“新仓库”按钮。 您将被要求提供仓库名称、描述，并选择仓库的可见性 (公开或私有)。"
        },
        {
          "StepNumber": 4,
          "Description": "将GitHub 存储库添加为远程",
          "Example": "git 远程添加来源 https://github.com/user/repo.git",
          "Explanation": "要将本地的 Git 仓库与 GitHub 仓库链接，您需要将GitHub 仓库添加为远程的 Git。 您可以使用 `git 远程add` 命令来做到这一点，然后是您想要给这个远程 (通常是 `origin` ) 和 GitHub 仓库的 URL 的名称。"
        },
        {
          "StepNumber": 5,
          "Description": "将更改推送到 GitHub 仓库",
          "Example": "git push -u origin master",
          "Explanation": "将本地Git仓库中的更改推送到 GitHub 仓库， 使用 `git 推送' 命令，然后使用远程 (`origin`) 的名称和你想要将更改推送到 (`master`) 的分支。 \"-u\" 选项将远程分支设置为将来的 \"git 推送\" 命令的默认值。"
        }
      ]
    }
  ]
}
